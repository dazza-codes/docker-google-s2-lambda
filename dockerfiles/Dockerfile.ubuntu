# https://hub.docker.com/_/ubuntu/
# Use LTS version (currently 18.04)
FROM ubuntu:18.04

# For more information about this base image, see
# https://blog.ubuntu.com/2018/07/09/minimal-ubuntu-released

ENV DEBIAN_FRONTEND noninteractive

# This docker image will compile google-s2 and the python library.
# https://github.com/google/s2geometry

RUN apt-get -yq update && \
    apt-get install -yq --no-install-recommends \
        apt-utils \
        locales && \
    /usr/sbin/locale-gen en_US.UTF-8 && \
    dpkg-reconfigure --frontend noninteractive locales && \
    echo "LC_ALL=en_US.UTF-8" >> /etc/environment && \
    echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen && \
    echo "LANG=en_US.UTF-8" > /etc/locale.conf

ENV LANGUAGE en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8

RUN apt-get install -yq --no-install-recommends \
        git \
        ca-certificates \
        openssh-client \
        openssl  && \
    update-ca-certificates && \
    export CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt && \
    git config --global http.sslVerify true && \
    git config --global http.sslCAinfo /etc/ssl/certs/ca-certificates.crt && \
    git config --global http.sslBackend "openssl"

ENV CURL_CA_BUNDLE /etc/ssl/certs/ca-certificates.crt

RUN apt-get install -yq --no-install-recommends \
    build-essential \
    g++ \
    git \
    cmake \
    make \
    swig \
    libgflags-dev \
    libgoogle-glog-dev \
    libgtest-dev \
    libssl-dev \
    # python build libs
    python3-dev \
    python3-openssl \
    python3-setuptools \
    python3-wheel \
    python3-pip \
    # Build dependencies often required by python packages
    curl \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    llvm \
    libncurses5-dev \
    libncursesw5-dev \
    libffi-dev \
    liblzma-dev \
    tk-dev \
    wget \
    xz-utils \
    zlib1g-dev

## Set python3 as the default
#RUN update-alternatives --install /usr/bin/python python $(which python3) 2 && \
#    update-alternatives --install /usr/bin/python-config python-config $(which python3-config) 2 && \
#    update-alternatives --install /usr/bin/pydoc pydoc $(which pydoc3) 2 && \
#    update-alternatives --install /usr/bin/pip pip $(which pip3) 2 && \
#    update-alternatives --auto python && \
#    update-alternatives --auto python-config && \
#    update-alternatives --auto pydoc && \
#    update-alternatives --auto pip

ENV BUILDDIR /app

RUN mkdir -p ${BUILDIR} \
    && cd $BUILDDIR \
    && git clone https://github.com/google/s2geometry.git \
    && mkdir ${BUILDDIR}/s2geometry/build \
    && cd ${BUILDDIR}/s2geometry/build

WORKDIR ${BUILDDIR}/s2geometry/build

RUN cmake \
        -DCMAKE_INSTALL_PREFIX:PATH=/usr \
        -DPYTHON_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())")  \
        -DPYTHON_LIBRARY=$(python3 -c "import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR'))") \
        -DPYTHON_EXECUTABLE:FILEPATH=`which python3` .. \
    && make \
    && make install

#-- Installing: /usr/include/s2/*
#-- Installing: /usr/lib/libs2.so
#-- Installing: /usr/lib/libs2testing.a
#-- Installing: /usr/lib/python3/dist-packages/_pywraps2.so
#-- Installing: /usr/lib/python3/dist-packages/pywraps2.py

# TODO: static builds did not work for swig wrapping
# TODO: might also need to bundle up what libs2.so is linked to
#       ldd /usr/lib/libs2.so

RUN apt-get install -yq zip && \
    zip_file="/tmp/py36_google_s2.zip" && \
    rm -f "${zip_file}" && \
    zip -q -r9 --symlinks "${zip_file}" \
        /usr/include/s2 \
        /usr/lib/libs2.so \
        /usr/lib/libs2testing.a \
        /usr/lib/python3/dist-packages/_pywraps2.so \
        /usr/lib/python3/dist-packages/pywraps2.py \
        && \
    unzip -q -t "${zip_file}" || exit 1 && \
    echo "created ${zip_file}"

# interactive login shell
ENV DEBIAN_FRONTEND teletype
CMD ["/bin/bash", "-l"]
